<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>5G-NR-PDSCH学习</title>
    <url>/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- build time:Sat Mar 21 2020 11:57:43 GMT+0800 (GMT+08:00) --><h1 id="1-PDSCH-物理流程"><a href="#1-PDSCH-物理流程" class="headerlink" title="1 PDSCH 物理流程"></a>1 PDSCH 物理流程</h1><h2 id="1-1-加扰"><a href="#1-1-加扰" class="headerlink" title="1.1 加扰"></a>1.1 加扰</h2><p>双码字传输时，$q \in \{0,1\}$；单码字传输时，$q = 0$。[TS 38.211 7.3.1.1]<br>每一个码字对应的原始数据 $b^{(q)}(0),…,b^{(q)}(M_{bit}^{(q)}-1)$ ,经过加扰处理生成加扰后的数据为 $\widetilde b^{(q)}(0),…,\widetilde b^{(q)}(M_{bit}^{(q)}-1)$ 。加扰处理如下所示：</p><script type="math/tex;mode=display">\widetilde b^{(q)}(i) = (b^{(q)}(i) + c^{(q)}(i))mod2</script><p>加扰序列是一个伪随机序列，由[TS 38.211 5.2.1]给出，加扰序列的初始为：</p><script type="math/tex;mode=display">C_{init} = n_{RNTI}\cdot2^{15}+q\cdot2^{14}+n_{ID}</script><p>其中：</p><ul><li>$n_{ID}$ = dataScramblingIdentityPDSCH(如果配置)，并且RNTI = C-RNTI or CS-RNTI，在公共搜索空间中不使用DCI格式1_0调度传输。</li><li>除此之外 $n_{ID} = N_{ID}^{cell}$</li><li>$n_{RNTI}$ 就是PDSCH当前传输时相关联的RNTI</li></ul><h2 id="1-2-调制"><a href="#1-2-调制" class="headerlink" title="1.2 调制"></a>1.2 调制</h2><p>每一个码字加扰后的比特块 $\widetilde b^{(q)}(0),…,\widetilde b^{(q)}(M_{bit}^{(q)}-1)$ 采用下表中的一种调制方式进行调制，得到一个复值调制符号块$d^{(q)}(0),…,d^{(q)}(M_{symb}^{(q)}-1)$。[TS 38.211 7.3.1.2]</p><table><tr><td><center>Modulation scheme</center></td><td><center>Modulation order</center></td></tr><tr><td><center>QPSK</center></td><td><center>2</center></td></tr><tr><td><center>16QAM</center></td><td><center>4</center></td></tr><tr><td><center>64QAM</center></td><td><center>6</center></td></tr><tr><td><center>256QAM</center></td><td><center>8</center></td></tr></table><h2 id="1-3-层映射"><a href="#1-3-层映射" class="headerlink" title="1.3 层映射"></a>1.3 层映射</h2><p>每一个码字生成的调制信号 $d^{(q)}(0),…,d^{(q)}(M_{symb}^{(q)}-1)$ 根据下表映射到多个层$x(i)=[x^0{i} \cdots x^{v-1}(i)]^T$，$i = 0,1,…,M_{symb}^{layer}-1$，其中$v$表示层数，$M_{symb}^{layer}$ 表示每层调制符号的数量。[TS 38.211 7.3.1.3]</p><div class="table-container"><table><thead><tr><th style="text-align:center">层数</th><th style="text-align:center">码字数</th><th>码字到层映射<br>$i = 0,1,…,M_{symb}^{layer}-1$</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td>$x^{(0)}(i) = d^{(0)}(i)$ $M_{symb}^{layer} = M_{symb}^{(0)}$</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">1</td><td>$x^{(0)}(i) = d^{(0)}(2i)$<br>$x^{(1)}(i) = d^{(0)}(2i+1)$ $M_{symb}^{layer} = M_{symb}^{(0)}/2$</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">1</td><td>$x^{(0)}(i) = d^{(0)}(3i)$<br>$x^{(1)}(i) = d^{(0)}(3i+1)$ $M_{symb}^{layer} = M_{symb}^{(0)}/3$<br>$x^{(2)}(i) = d^{(0)}(3i+2)$</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">1</td><td>$x^{(0)}(i) = d^{(0)}(4i)$<br>$x^{(1)}(i) = d^{(0)}(4i+1)$<br>$x^{(2)}(i) = d^{(0)}(4i+2)$ $M_{symb}^{layer} = M_{symb}^{(0)}/4$<br>$x^{(3)}(i) = d^{(0)}(4i+3)$</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">2</td><td>$x^{(0)}(i) = d^{(0)}(2i)$<br>$x^{(1)}(i) = d^{(0)}(2i+1)$<br>$x^{(2)}(i) = d^{(1)}(3i)$ $M_{symb}^{layer} = M_{symb}^{(0)}/2 = M_{symb}^{(1)}/3$<br>$x^{(3)}(i) = d^{(1)}(3i+1)$<br>$x^{(4)}(i) = d^{(1)}(3i+2)$</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">2</td><td>$x^{(0)}(i) = d^{(0)}(3i)$<br>$x^{(1)}(i) = d^{(0)}(3i+1)$<br>$x^{(2)}(i) = d^{(0)}(3i+2)$<br>$x^{(3)}(i) = d^{(1)}(3i)$ $M_{symb}^{layer} = M_{symb}^{(0)}/3 = M_{symb}^{(1)}/3$<br>$x^{(4)}(i) = d^{(1)}(3i+1)$<br>$x^{(5)}(i) = d^{(1)}(3i+2)$</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">2</td><td>$x^{(0)}(i) = d^{(0)}(3i)$<br>$x^{(1)}(i) = d^{(0)}(3i+1)$<br>$x^{(2)}(i) = d^{(0)}(3i+2)$<br>$x^{(3)}(i) = d^{(1)}(4i)$ $M_{symb}^{layer} = M_{symb}^{(0)}/3 = M_{symb}^{(1)}/4$<br>$x^{(4)}(i) = d^{(1)}(4i+1)$<br>$x^{(5)}(i) = d^{(1)}(4i+2)$<br>$x^{(6)}(i)=d^{(1)}(4i+3)$</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">2</td><td>$x^{(0)}(i) = d^{(0)}(4i)$<br>$x^{(1)}(i) = d^{(0)}(4i+1)$<br>$x^{(2)}(i) = d^{(0)}(4i+2)$<br>$x^{(3)}(i)=d^{(0)}(4i+3)$<br>$x^{(3)}(i) = d^{(1)}(4i)$ $M_{symb}^{layer} = M_{symb}^{(0)}/4 = M_{symb}^{(1)}/4$<br>$x^{(4)}(i) = d^{(1)}(4i+1)$<br>$x^{(5)}(i) = d^{(1)}(4i+2)$<br>$x^{(6)}(i)=d^{(1)}(4i+3)$</td></tr></tbody></table></div><p>可以看到，单码字映射到1-4层，双码字映射到5-8层。</p><h2 id="1-4-天线端口映射"><a href="#1-4-天线端口映射" class="headerlink" title="1.4 天线端口映射"></a>1.4 天线端口映射</h2><p>经过层映射之后的数据按照如下方式映射到天线端口。[TS 38.211 7.3.1.4]</p><script type="math/tex;mode=display">\left[
\begin{matrix}
y^{(p_0)}(i)\\
\vdots\\
y^{(p_{v-1})}(i)\\
\end{matrix}
\right]= \left[
\begin{matrix}
x^{(0)}(i)\\
\vdots\\
x^{(v-1)}(i)
\end{matrix}
\right]</script><p>其中 $i=0,1,…,M_{symb}^{ap}-1$，$M_{symb}^{ap}=M_{symb}^{layer}$</p><h2 id="1-5-映射到虚拟资源快"><a href="#1-5-映射到虚拟资源快" class="headerlink" title="1.5 映射到虚拟资源快"></a>1.5 映射到虚拟资源快</h2><p>对于每个天线步骤，都会创建一个虚拟资源网格。在资源网格内，从RE的最低频率到较高频率的来自来填充PDSCH数据到每个RE中。一旦它以分配的PDSCH资源块的最高频率到达RE，则移至下一个OFDM符号的最低频率的RE。[TS 38.211 7.3.1.5]<br>但不应使用为以下目的而分配的RE：</p><ul><li>分配给与要发送的PDSCH相关的DMRS的RE</li><li>为DMRS分配给用于其他共同调度UE的RE</li><li>非零功率CSI-RS的RE，由MeasObjectNR IE中较高层参数CSI-RS-Resource-Mobility配置的非零功率CSI-RS除外。</li><li>PTRS的RE</li><li>声明为“不适用于PDSCH的RE”</li></ul><h2 id="1-6-从虚拟资源块映射到物理资源块"><a href="#1-6-从虚拟资源块映射到物理资源块" class="headerlink" title="1.6 从虚拟资源块映射到物理资源块"></a>1.6 从虚拟资源块映射到物理资源块</h2><p>从VRB到PRB的映射有交织和非交织两种。[TS 38.211 7.3.1.6]</p><h3 id="1-6-1-非交织"><a href="#1-6-1-非交织" class="headerlink" title="1.6.1 非交织"></a>1.6.1 非交织</h3><p>在公共搜索空间用DCI Format 1_0调度的PDSCH传输这种情况下,虚拟资源块$n$映射到物理资源块 $n + N_{start}^{CORESET}$ 上，其中$N_{start}^{CORESET}$是接受相应DCI的控制资源集中编号最小的物理资源块；<br>除此情况之外，虚拟资源块$n$就映射到物理资源块$n$上。<br>如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/non-interleave.png" alt></p><h3 id="1-6-2-交织"><a href="#1-6-2-交织" class="headerlink" title="1.6.2 交织"></a>1.6.2 交织</h3><p>交织映射模式，以资源块束(RB bundle)来定义，与PDCCH的RB bundle 相比PDSCH的资源块束有些不同，主要分三种情况：<br><strong>类型一</strong>：<br>在CORESET#0的Type0-PDCCH公共搜索空间，由SI-RNTI加扰，用DCI Format 1_0 调度的PDSCH传输。<br>下行初始激活的BWP，大小$N_{BWP,init}^{size}$，分为$N_{bundle} = \lceil N_{BWP,init}^{size}/L \rceil$ 个RB bundle，按照RB编号和束编号升序排序。其中$L$是bundle的大小，取值为２。如果$N_{BWP,init}^{size}$不能整数L，最后一个RB bundle包含 $N_{BWP,init}^{size}modL$个RB，其实由于$L = 2$所以最后一个不能整数的话那就剩下一个RB，能整数除最后一个RB bundle就是2个RB。<br>如下图所示：<br><br><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/interleaver1.png" alt></p><p><strong>类型二</strong>：<br>除上述情况外，在公共搜索空间由DCI Format 1_0调度的PDSCH传输。<br>BWP起始位置$N_{BWP,i}^{start}$，大小为$N_{BWP,init}^{size}$ 的VRB集合$\{0,1,…,N_{BWP,init}^{size}-1\}$ 分为$N_{bundle}$ 个虚拟RB bundle，相应的$N_{BWP,init}^{size}$ 个PRB集合$\{N_{start}^{CORESET},N_{start}^{CORESET}+1,…,N_{start}^{CORESET}+N_{BWP,init}^{size}\}$ 分为$N_{bundle}$ 个物理RB bundle，其中$N_{bundle}=\lceil (N_{BWP,init}^{size}+(N_{BWP.i}^{start}+N_{start}^{CORESET})modL)/L \rceil$ ，L是bundle的大小，取值为2，$N_{start}^{CORESET}$是接受相应DCI的控制资源集中编号最小的物理资源块。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/interleave2.png" alt></p><p>其RB bundle 包含的RB数如下描述：</p><ul><li>0号RB bundle 包含了$L-((N_{BWP,i}^{start}+N_{start}^{CONRESET})modL)$个RB；</li><li>如果$(N_{BWP,init}^{size}+N_{BWP,i}^{start}+N_{start}^{CONRESET})modL&gt;0$，则最后一个RB bundle包含了$(N_{BWP,init}^{size}+N_{BWP,i}^{start}+N_{start}^{CONRESET})modL$ 个RB，否则包含$L$个RB；</li><li>其余RB bundle 包含$L$ 个RB；<br>之所以要考虑进$N_{start}^{CONRESET}$，是因为38.214中规定，对于任何在PDCCH公共搜索空间中以DCI format 1_0调度的PDSCH传输，其RB编号从接受DCI的CORESET的最低RB开始。</li></ul><p><strong>类型三</strong>：<br>其他PDSCH传输。<br>BWP，i的起始位置$N_{BWP,i}^{start}$，大小$N_{BWP,i}^{size}$，分为$N_{bundle}$ 个RB bundle 且按照RB编号和束编号的升序排列，其中$N_bundle = \lceil(N_{BWP,init}^{size}+(N_{BWP,i}^{start}modL_i))/L_i \rceil$，$L_i$ 是bundle的大小，由高层参数vrb- ToPRB-Interleaver配置。<br><br><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/interleave3.png" alt></p><p>其RB bundle 包含的RB数如下描述：</p><ul><li>0号RB bundle包含了$L_i-(N_{BWP,i}^{start}modL_i)$个RB，目的是为了从下一个bundle开始，每个bundle的起始位置都是$L_i $的整数倍；</li><li>如果$(N_{BWP,i}^{start}+N_{BWP,i}^{size})modL_i&gt;0$，最后一个RB bundle包含了$(N_{BWP,i}^{start}+N_{BWP,i}^{size})modL_i$ 个RB，否则包含$L_i$ 个RB；</li><li>其余RB bundle 包含$L_i$ 个RB。</li></ul><p>举个例子来描述类型三：<br>例子：假设$N_{BWP,i}^{start} = 5,N_{BWP,i}^{size} = 21$<br>1) $L_i=5$<br>$N_bundle = \lceil(N_{BWP,init}^{size}+(N_{BWP,i}^{start}modL_i))/L_i \rceil = \lceil(21+(5mod5))/5 \rceil = 5$<br>$N_{bundle,0} = L_i-(N_{BWP,i}^{start}modL_i) = 5-(5mod5) =5$<br>$N_{bundle,end} = (N_{BWP,i}^{start}+N_{BWP,i}^{size})modL_i = (5+21)mod5 = 1$<br>$N_{bundle,other} = L_i = 5$<br>如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/case1.png" alt></p><p>2) $L_i=4$<br>$N_bundle = \lceil(N_{BWP,init}^{size}+(N_{BWP,i}^{start}modL_i))/L_i \rceil = \lceil(21+(5mod4))/4 \rceil = 6$<br>$N_{bundle,0} = L_i-(N_{BWP,i}^{start}modL_i) = 4-(5mod4) =3$<br>$N_{bundle,end} = (N_{BWP,i}^{start}+N_{BWP,i}^{size})modL_i = (5+21)mod4 = 2$<br>$N_{bundle,other} = L_i = 4$<br>如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/case2.png" alt></p><h3 id="1-6-3-VRB-bundle-到-PRB-bundle-的映射"><a href="#1-6-3-VRB-bundle-到-PRB-bundle-的映射" class="headerlink" title="1.6.3 VRB bundle 到 PRB bundle 的映射"></a>1.6.3 VRB bundle 到 PRB bundle 的映射</h3><p>本节来看属于$j\in \{0,1,…,N_{bundle}-1\}$ 区间内的虚拟RB向物理RB的映射：</p><ul><li>$N_bundle - 1$号虚拟RB bundle映射到$N_{bundle}-1$号物理RB bundle；</li><li>其余$j\in \{0,1,…,N_{bundle}-2\}$ 的虚拟RB bundle 遵循$f(j)$ 函数映射到物理RB bundle<script type="math/tex;mode=display">f(j) = rC+c\\j = cR+r\\r = 0,1,...,R-1\\c = 0,1,...,C-1\\R = 2\\C = \lfloor N_{bundle}/R \rfloor</script></li></ul><p>举个例子说明，运用上面的例子数据:<br>1) $R = 2; \quad C = \lfloor N_{bundle}/R \rfloor = \lfloor 5/2 \rfloor = 2;\quad r = 0,1,2;\quad c = 0,1,2$。</p><div class="table-container"><table><thead><tr><th>c</th><th>r</th><th>j: VRB bundle</th><th>$f(j)$: PRB bundle</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>2</td></tr><tr><td>1</td><td>0</td><td>2</td><td>1</td></tr><tr><td>1</td><td>1</td><td>3</td><td>3</td></tr></tbody></table></div><p>映射结果如图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/case31.png" alt></p><p>2) $R = 2; \quad C = \lfloor N_{bundle}/R \rfloor = \lfloor 6/2 \rfloor = 3;\quad r = 0,1;\quad c = 0,1,2$。</p><div class="table-container"><table><thead><tr><th>c</th><th>r</th><th>j: VRB bundle</th><th>$f(j)$: PRB bundle</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>0</td><td>1</td><td>1</td><td>3</td></tr><tr><td>1</td><td>0</td><td>2</td><td>1</td></tr><tr><td>1</td><td>1</td><td>3</td><td>4</td></tr><tr><td>2</td><td>0</td><td>4</td><td>2</td></tr><tr><td>2</td><td>1</td><td>5</td><td>5</td></tr></tbody></table></div><p>映射结果如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/case32.png" alt></p><h1 id="2-PDSCH-DMRS"><a href="#2-PDSCH-DMRS" class="headerlink" title="2 PDSCH DMRS"></a>2 PDSCH DMRS</h1><h2 id="2-1-序列生成"><a href="#2-1-序列生成" class="headerlink" title="2.1 序列生成"></a>2.1 序列生成</h2><p>PDSCH DMRS序列有如下公式生成：</p><script type="math/tex;mode=display">r(n) = \frac{1}{\sqrt{2}}(1-2\cdot c(2n))+j\frac{1}{\sqrt{2}}(1-2\cdot c(2n+1))</script><p>加扰序列采用31阶Gold序列生成，加扰序列的初始序列$c_{init}$如下式所示:</p><script type="math/tex;mode=display">c_{init} = (2^{17}(N_{symb}^{slot}n_{s,f}^{\mu}+l+1)(2N_{ID}^{n_{SCID}}+1)+2N_{ID}^{n_{SCID}}+n_{SCID})mod2^{31}</script><p>其中：</p><ul><li>$l$ 为时隙中的符号索引</li><li>$n_{s,f}$ 为时隙索引</li><li>$N_{symb}^{slot}$ 为一个时隙内的符号数量</li><li>$n_{SCID},N_{ID}^{n_{SCID}}$ :<br><strong>1) 对于C-RNTI/MCS-C-RNTI/CS-RNTI</strong><br>① DCI format 1_1 , $n_{SCID}$ 可由DMRS-DownlinkConfig IE中scramblingID0,scramblingID1配置,可以在$N_{ID}^0,N_{ID}^1$之间选择,$N_{ID}^{0},N_{ID}^{1}\in \{0,1,…,65535\}$。<br>② DCI format 1_1 , $n_{SCID}$ 可由DMRS-DownlinkConfig IE中scramblingID0配置,可以在$N_{ID}^0$之间选择,$N_{ID}^{0}\in \{0,1,…,65535\}$。<br>③ 如果①DMRS-DownlinkConfig IE中scramblingID0,scramblingID1都未配置,则$n_{SCID}=0,N_{ID}^{n_{SCID}}=N_{ID}^{cell}$。<br>④ 如果②DMRS-DownlinkConfig IE中scramblingID0未配置，则$n_{SCID}=0,N_{ID}^{n_{SCID}}=N_{ID}^{cell}$。<br><strong>２) 对于SI-RNTI/P-RNTI/RA-RNTI</strong><br>$n_{SCID}=0,N_{ID}^{n_{SCID}}=N_{ID}^{cell}$。</li></ul><p>高层配置参数DMRS-DownlinkConfig内容如下：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/DMRS-DLconfig.png" alt></p><h2 id="2-2-PDSCH-DMRS-频域位置"><a href="#2-2-PDSCH-DMRS-频域位置" class="headerlink" title="2.2 PDSCH DMRS 频域位置"></a>2.2 PDSCH DMRS 频域位置</h2><p>DMRS映射方式分为Configuration type 1 和configuration type 2 两种，有DMRS-DownlinkConfig中的drms-type指示，如果未配置，则默认为Configuration type 1。<br>序列映射到RE的公式如下所示：</p><script type="math/tex;mode=display">\alpha_{k,l}^{p,\mu}=\beta_{PDSCH}^{DMRS}w_f(k')w_t(l')r(2n+k')\\k = \begin{cases}4n+2k'+\Delta \quad \quad Configuration\quad type\quad1\\6n+k'+\Delta\quad \quad Configuration\quad type\quad 2 \end{cases}\\k'=0,1\\l=\overline{l}+l'\\n = 0,1,...</script><p>$k$为频域指示，$l$为时域指示。Configuration type 1 和configuration type 2，分别用于支持单用户MIMO和多用户MIMO。除此之外，由于类型1和类型2平均每个端口占用的RE数量不同，即每个端口的RE密度不同，所以各自有不同的适用场景。类型1更适合低信噪比、频域选择性较高的场景，类型2更适合高信噪比、时延扩展较小的场景。</p><p>频域指示$k$的参考点分两种情况：</p><ul><li>承载SIB1的PDSCH的DMRS，$k$的参考点为CORESET#0的RE0；</li><li>其余情况参考点为CRB#0的RE0即point A。</li></ul><p>以下图示分别展示了Configuration type 1 和configuration type 2两种情况下的DMRS频域位置，为了方便只选取了1RB左右大小，都是single symbol。<br>Configuration type 1：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/DMRS频域分析1.png" alt></p><p></p><p>Configuration type 2:</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/DMRS频域分析2.png" alt></p><h2 id="2-3-PDSCH-DMRS-的符号位置"><a href="#2-3-PDSCH-DMRS-的符号位置" class="headerlink" title="2.3 PDSCH DMRS 的符号位置"></a>2.3 PDSCH DMRS 的符号位置</h2><p>DMRS的符号位置取决于PDSCH的mapping type，分为mapping type A和mapping type B，参考表格或者配置可以获得PDSCH的mapping type，以及对应的$k_0,S,L$。[TS 38.214 5.1.2.1]<br><br><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/Table5.1.2.1-1.png" alt><br><br>时域指示$l$的参考点分两种情况：</p><ul><li>PDSCH mapping type A：时域指示$l$的参考点为时隙的起始symbol，且DM-RS的第一个符号位置为3或4(表中S = 2，3)，由MIB中参数dmrs-TypeA-Position指示，主要考虑PDCCH的具体配置。</li><li>PDSCH mapping type B时，$l$的参考点为PDSCH的起始symbol，DM-RS从PDSCH调度区域的第一个符号开始传输。<br>两种情况如下图所示：<br>例子一：type A，$S = 3 , L = 7$, $l_0$ 的大小是与参考点的差值，表示DMRS的初始符号。</li></ul><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/DMRS时域1.png" alt></p><p>例子二：type B，$S = 6 , L = 4$, $l_0$ 的大小是与参考点的差值，表示DMRS的初始符号。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/DMRS时域2.png" alt></p><h2 id="2-4-DMRS-符号类型"><a href="#2-4-DMRS-符号类型" class="headerlink" title="2.4 DMRS 符号类型"></a>2.4 DMRS 符号类型</h2><p>DMRS两个symbol类型，single symbol 和 double symbol。取决于DMRS-DownlinkConfig中的maxLength参数的配置，maxLength配置为len1，则取值为len1（single-symbol）；如果配置为len2（double-symbol）。如果高层参数maxLength没有配置，则为single类型。</p><h2 id="2-5-添加导频"><a href="#2-5-添加导频" class="headerlink" title="2.5 添加导频"></a>2.5 添加导频</h2><p>在NR中的中/高速场景中，为了保证估计精度，除了前置导频(前文所描述的DMRS)外，加入了与前置导频TDM的附加导频，附加DM-RS结构与前置DM-RS的图样相同，在double symbol DM-RS情况下，最多可以配置1组附加导频，在single symbol前置DM-RS情况下最多可以配置3组附加导频。附加导频的数量与调度时长有关，时域位置由高层参数dmrs-AdditionalPosition指示,如下表所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/添加导频单符号.png" alt></p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/添加导频双符号.png" alt></p><p>当PDSCH mapping type B时，如果PDSCH的资源和CORESET相重叠，则PDSCH DM-RS要往后顺延到紧挨CORESET的后面，此时，如果PDSCH的duration为2时，DM-RS的起始位置不能超过PDSCH的第二个symbol，当PDSCH的duration为4时，DM-RS的起始位置不能超过PDSCH的第3个symbol，当PDSCH的duration为7时，DM-RS的第一个symbol不能超过PDSCH的第4个symbol。<br>(Note: 以上所说的PDSCH的duration，也就是$L$，同时也是$l_d$ ，都是一个意思)<br><br>举个例子来说明上面两个表的意思：<br>$S = 2,L=11$,maxLength配置为len1，即为single symbol ,按照第一个 表格，如果此时$l_d = 11$ PDSCH mapping type A , dmrs-AdditionalPosition指示为2，则代表在DMRS导频位置分别在DMRS初始位置$l_0$(若为$l_0=2$),#6,#9符号上。如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/添加导频例子.png" alt></p><h2 id="2-6-端口映射"><a href="#2-6-端口映射" class="headerlink" title="2.6 端口映射"></a>2.6 端口映射</h2><p>结合PDSCH DMRS序列生成及映射公式，以及下表可知：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/Table7.4.1.1.2-12.png" alt></p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/Table7.4.1.1.2-5.png" alt></p><ul><li>type 1，single symbol情况下，最多支持4个端口，端口01和23分别在不同的CDM group，每个CDM group内，比如端口0和1，又通过频域的OCC来实现正交，从而实现4个端口的正交。</li><li>type 1，double symbol情况下，最多支持8个端口，除了频域OCC外，还可以时域OCC来实现正交，所以可以支持更多的端口。</li><li>type 2，single symbol情况下，最多支持6个端口，共三个CDM group，每个group内又通过频域OCC实现正交。</li><li>type 2，double symbol情况下，最多支持12个端口，与类型1双符号情况同理，除了频域OCC外，还可以时域OCC，从而支持更多的端口。</li></ul><p>（还未看完，还有端口，层方面的知识）</p><h1 id="3-PDSCH-PTRS"><a href="#3-PDSCH-PTRS" class="headerlink" title="3 PDSCH PTRS"></a>3 PDSCH PTRS</h1><h2 id="3-1-相位噪声"><a href="#3-1-相位噪声" class="headerlink" title="3.1 相位噪声"></a>3.1 相位噪声</h2><p>相位噪声指射频器件在各种噪声（如随机性白噪声、闪烁噪声）的作用下引起的系统输出信号相位的随机变化。相位噪声会恶化接收端的SNR（Signal-Noise Ratio信噪比）或EVM（Error Vector Magnitude误差向量幅度），造成大量的误码，这样就限制了高阶调制的使用，会严重影响系统的容量。<br>相对来说，相位噪声对低频段，也就是sub6G频段的影响较小一些。而高频段（毫米波）下，由于参考时钟源的倍频次数大幅增加以及器件的工艺水平和功耗等各方面的原因，相位噪声的影响也是大幅增加。<br>为了应对高频段下的相位噪声，除了增大子载波间隔、提高器件质量之外，5G NR引入了PT-RS（Phase Tracking Reference Signal）信号以及相位估计补偿算法。</p><h2 id="3-2-序列生成"><a href="#3-2-序列生成" class="headerlink" title="3.2 序列生成"></a>3.2 序列生成</h2><p>生成序列方式与PDSCH DMRS相同。</p><h2 id="3-3-高层配置"><a href="#3-3-高层配置" class="headerlink" title="3.3 高层配置"></a>3.3 高层配置</h2><p>下行是否配置了PT-RS，由DMRS-DownlinkConfig中的字段phaseTrackingRS来决定，如果该字段缺省或配置为released，则表示下行没有PT-RS信号。PT-RS的具体配置在PTRS-DownlinkConfig中：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/PTRS.png" alt></p><p><strong>frequencyDensity</strong><br>frequencyDensity提供了两个值，这两个值都在（1,276）的范围内，分别对应了[TS 38.214-Table5.1.6.3-2]中的$N_{RB0},N_{RB1}$，UE再通过DCI中的调度RB数查询该表，就可以确定PT-RS的频域密度$K_{PT−RSK}$ 。如果调度RB数过少，即$N_{RB}&lt;N_{RB0}$ 时，PT-RS的系统开销相对来说就太大了，这个时候下行没有PT-RS信号。</p><div class="table-container"><table><thead><tr><th style="text-align:center">scheduled bandwidth</th><th style="text-align:center">Frequency density ($K_{PT-RS}$)</th></tr></thead><tbody><tr><td style="text-align:center">$N_{RB}&lt;N_{RB0}$</td><td style="text-align:center">PT-RS is not present</td></tr><tr><td style="text-align:center">$N_{RB0}&lt;N_{RB}&lt;N_{RB1}$</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">$N_{RB1}&lt;N_{RB}$</td><td style="text-align:center">4</td></tr></tbody></table></div><p><strong>timeDensity</strong><br>timeDensity提供了三个范围在（0,29）的值，分别对应[TS 38.214-Table5.1.6.3-1]中的ptrs-MCS1、ptrs-MCS2、ptrs-MCS3，UE再通过DCI中的调度MCS信息就可以确定PT-RS的时域密度(间隔)$L_{PT−RS}$，表中的ptrs-MCS4没有在高层参数中明确配置，UE可以假定该值为当前可使用的最大MCS+1。</p><div class="table-container"><table><thead><tr><th style="text-align:center">scheduled MCS</th><th style="text-align:center">Time density ($L_{PT-RS}$)</th></tr></thead><tbody><tr><td style="text-align:center">$ptrs-MCS1\leq l_{MCS}&lt;ptrs-MCS2$</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">$ptrs-MCS2\leq l_{MCS}&lt;ptrs-MCS3$</td><td style="text-align:center">2</td></tr><tr><td style="text-align:center">$ptrs-MCS3\leq l_{MCS}&lt;ptrs-MCS4$</td><td style="text-align:center">1</td></tr></tbody></table></div><p><strong>epre-Ratio</strong><br>epre-Ratio通过[TS 38.214-Table4.1-2] 确定了PT-RS端口每层每个RE上PT-RS EPRE与PDSCH EPRE的比例，这个比例叫$\rho _{PTRS}$, 它与$\beta_{PTRS}$ 的关系为：$\beta_{PTRS}=10^{\frac {\rho_{PTRS}}{20}}$。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/PTRS参数.png" alt></p><p><strong>resourceElementOffset</strong> 见下文表格中参数，取值为{00,01,10,11}。</p><h2 id="3-4-资源映射"><a href="#3-4-资源映射" class="headerlink" title="3.4 资源映射"></a>3.4 资源映射</h2><p>如果PTRS存在，UE将按照按$\beta_{PT_RS}$缩放，并映射到资源单元中：</p><script type="math/tex;mode=display">\alpha_{k,l}^{p,\mu} = \beta_{PT-RS}\cdot r_k</script><h3 id="3-4-1-时域索引"><a href="#3-4-1-时域索引" class="headerlink" title="3.4.1 时域索引"></a>3.4.1 时域索引</h3><p>确定时域索引$l$的步骤如下：<br></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set i &#x3D; 0 and l_&#123;ref&#125;&#x3D;0  </span><br><span class="line">if l_&#123;ref&#125;+iL_&#123;PTRS&#125;  overlaps with a symbol used for DM-RS according to clause 7.4.1.1.2</span><br><span class="line">- set i &#x3D; 1 </span><br><span class="line">- set l_&#123;ref&#125; to the number of the last DM-RS symbol in a sequence of time-contiguous DM-RS occasions</span><br><span class="line">add l_&#123;ref&#125; + iL_&#123;PTRS&#125; to the set of time indices for PT-RS</span><br><span class="line">increment  i by one</span><br><span class="line">repeat from step 2 above as long as l_&#123;ref&#125;+iL_&#123;PTRS&#125; is inside the PDSCH allocation</span><br></pre></td></tr></table></figure><p></p><p>简而言之，PT-RS时域的的范围，从调度的PDSCH的第一个符号开始，避开DMRS所在的位置，以$L_{PT−RS}$为间隔，一直到PDSCH结束。$L_{PT-RS}$不仅是PT-RS之间的间隔，还是与DMRS最后一个符号之间的间隔。如下图所示：<br>图中 仅选取了$1 RB*14 symbol$ 资源单元 ， $l_0 = 2 , L_{PT-RS} = 2$ , single symbol类型。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/PTRS时域图.png" alt></p><h3 id="3-4-2-频域索引"><a href="#3-4-2-频域索引" class="headerlink" title="3.4.2 频域索引"></a>3.4.2 频域索引</h3><p>首先，假定分配给PDSCH的RB为从0到$N_{RB}-1$，那么分配给PDSCH的子载波范围就是0-$N_{sc}^{RB}N_{RB}-1$。最终PTRS频域索引$k$，由下面公式得到：</p><script type="math/tex;mode=display">k=k_{ref}^{RE}+(iK_{PT-RS}+k_{ref}^{RB})N_{sc}^{RB}\\k_{ref}^{RB}= \begin{cases}n_{RNTI}modK_{PT-RS} \quad \quad \quad if N_{RB}modK_{PT-RS} = 0 \\n_{RNTI}mod(N_{RB}modK_{PT-RS})\quad \quad otherwise\end{cases}</script><p>$k_{ref}^{RE}$ 由下表获得[TS 38.311-Table 7.4.1.2.2-1]：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/频域索引.png" alt></p><p>由上可知，$K_{PT-RS}$为相邻 PTRS之间间隔的RB数，即相邻 PTRS之间相差$K_{PT-RS}\cdot N_{sc}^{RB}$ 个子载波，第一个PTRS 子载波定位是 $k_{ref}^{RE}+（0K_{PT-RS}+k_{ref}^{RB}）N_{sc}^{RB}$ 。大概的图样如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDSCH%E5%AD%A6%E4%B9%A0/PTRS频域图.png" alt></p><blockquote><p>主要参考：<br>博客：<a href="https://blog.csdn.net/littleBird_2/article/details/89408575" target="_blank" rel="noopener">https://blog.csdn.net/littleBird_2/article/details/89408575</a> (PDSCH)<br>博客：<a href="https://blog.csdn.net/kakamilan/article/details/104535554" target="_blank" rel="noopener">https://blog.csdn.net/kakamilan/article/details/104535554</a> (PDSCH-DMRS)<br>博客：<a href="https://blog.csdn.net/m0_45416816/article/details/103807853" target="_blank" rel="noopener">https://blog.csdn.net/m0_45416816/article/details/103807853</a> (PDSCH-DMRS)<br>博客：<a href="https://blog.csdn.net/littleBird_2/article/details/89683712" target="_blank" rel="noopener">https://blog.csdn.net/littleBird_2/article/details/89683712</a> (PDSCH-PTRS)<br>网页：<a href="http://www.sharetechnote.com" target="_blank" rel="noopener">http://www.sharetechnote.com</a></p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>5G协议</category>
      </categories>
      <tags>
        <tag>PDSCH</tag>
      </tags>
  </entry>
  <entry>
    <title>5G-NR-PDCCH学习</title>
    <url>/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- build time:Sat Mar 21 2020 11:57:43 GMT+0800 (GMT+08:00) --><h1 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1 Introduction"></a>1 Introduction</h1><p>PDCCH信道主要承载的是DCI信息。不同的调度信息以DCI format区分，DCI format种类包括以下几种，用于调度PUSCH、PDSCH、TPC、SFI等 [TS 38.212 7.3.1]。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/DCI表格.png" alt></p><p>PDCCH传输过程主要如下图所示:</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/NR_PDCCH_01.png" alt></p><p>[TS 38.212 7.3] 中DCI的主要处理过程如下。</p><blockquote><ol><li>Information Element Multiplexing</li><li>CRC Attachment</li><li>Polar Coding</li><li>Rate Matching</li><li>Scrambling</li><li>Modulation</li><li>Resource Element Mapping</li></ol></blockquote><p>下图是一个更加详细的过程：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/NR_PDCCH_02.png" alt></p><h1 id="2-PDCCH-Transport-Process"><a href="#2-PDCCH-Transport-Process" class="headerlink" title="2 PDCCH Transport Process"></a>2 PDCCH Transport Process</h1><h2 id="2-1-Information-Element-Multiplexing"><a href="#2-1-Information-Element-Multiplexing" class="headerlink" title="2.1 Information Element Multiplexing"></a>2.1 Information Element Multiplexing</h2><p>信息元素多路复用这是生成承载各种控制和调度信息的DCI的位串的过程[TS 38.212 7.3]。如果DCI数据长度小于12比特，则填充比特0作为padding。<br>每个字段都按照其在说明中出现的顺序进行映射，包括零填充位（如果有），其中第一个字段映射到最低顺序信息位，每个连续字段映射到较高顺序信息位。 每个字段的最高有效位映射到该字段的最低顺序信息位，例如第一个字段的最高有效位映射到$a_0$。</p><h2 id="2-2-CRC-Attachment"><a href="#2-2-CRC-Attachment" class="headerlink" title="2.2 CRC Attachment"></a>2.2 CRC Attachment</h2><h3 id="2-2-1-CRC-Attach"><a href="#2-2-1-CRC-Attach" class="headerlink" title="2.2.1 CRC Attach"></a>2.2.1 CRC Attach</h3><p>通过循环冗余校验（CRC）在DCI 传输上提供错误检测 [TS 38.212 7.3.2] ，操作流程如下图所示，其中最开始添加的24位数据全是1。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/NR_PDCCH_CRC_01.png" alt></p><h3 id="2-2-2-Masking-with-RNTI"><a href="#2-2-2-Masking-with-RNTI" class="headerlink" title="2.2.2 Masking with RNTI"></a>2.2.2 Masking with RNTI</h3><p>在添加CRC后，最后16位被特定的RNTI加扰。使用该RNTI，UE可以确定DCI是针对哪个UE以及DCI的用途。 [TS 38.212 7.3.2]，操作流程如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/NR_PDCCH_RNTI_Masking_01.png" alt></p><h2 id="2-3-Polar-Coding"><a href="#2-3-Polar-Coding" class="headerlink" title="2.3 Polar  Coding"></a>2.3 Polar Coding</h2><p>信息比特被传送到信道编码块<br>如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/NR_PDCCH_ChannelCoding_01.png" alt></p><h2 id="2-4-Rate-Matching"><a href="#2-4-Rate-Matching" class="headerlink" title="2.4 Rate Matching"></a>2.4 Rate Matching</h2><p>速率匹配的输入比特序列是 $d_0,…,d_{N-1}$，通过设置根据 [TS 38.212 5.4.1] 执行速率匹配 $I_{BIL} = 0$，速率匹配后的输出比特序列表示为 $f_0,…,f_{E-1}$。<br>如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/NR_PDCCH_RateMatching_01.png" alt></p><h2 id="2-5-Scrambling"><a href="#2-5-Scrambling" class="headerlink" title="2.5  Scrambling"></a>2.5 Scrambling</h2><h3 id="2-5-1-CCE"><a href="#2-5-1-CCE" class="headerlink" title="2.5.1 CCE"></a>2.5.1 CCE</h3><p>Rate matching根据分配给PDCCH的资源进行速率匹配，PDCCH分配的基本单位为<strong>CCE</strong>(Control Channel Element)，(1 CCE = 6 REG = 72 RE，1 REG = 1 OFDM symbol * 12 subcarrier = 12 RE)，对于一个PDCCH而言，其由一个或多个CCEs组成，而所分配的CCE数量根据聚合等级的不同而不同，PDCCH所支持的聚合等级下表所示。 [TS 38.211 7.3.1]</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/CCE.png" alt></p><h3 id="2-5-2-CORESET"><a href="#2-5-2-CORESET" class="headerlink" title="2.5.2 CORESET"></a>2.5.2 CORESET</h3><p>UE可被配置多个<strong>CORESET</strong>(Control-resource set, 控制资源集)，其位于BWP内，对于每个BWP最多被配置3个CORESET(包括common和UE-specific CORESETs)。<br>对于PDCCH而言，所传输控制信息的时频位置位于CORESET内，而一个CORESET时频位置的组成：<strong>频域</strong>由$N_{RB}^{CORESET}$个RB组成，<strong>时域</strong>由$N_{symb}^{CORESET} \in \{1,2,3\}$个符号组成。其中$N_{symb}^{CORESET} = 3$ 仅当高层参数 $dmrs-TypeA-Position = 3 $ 时才支持。<br>每个CORESET中有<strong>交织</strong>(分布式)和<strong>非交织</strong>(集中式)两种CCE-to-REG映射可选（由ControlResourceSet IE 中的高层参数cce-REGMappingType配置），但是每个CORESET仅能关联其中一种，其CCE-to-REG映射通过REG bundles描述：</p><p>- REG bundle 被定义为REG$\{iL,iL+1,…,iL+L−1\}$，其中L是REG bundle大小(由高层参数reg-BundleSize指定)，i = 0,1,…,$N_{REG}^{CORESET}/L-1$是， $N_{REG}^{CORESET}$是CORESET中REG数，$N_{REG}^{CORESET} = N_{RB}^{CORESET}\cdot N_{symb}^{CORESET}$；<br>- 最终CCE-REG的映射，是按照REG束来表示的，CCE $j$ 中包含了REG bundle ${f(6j/L),f(6j/L+1),…,f(6j/L+6/L−1)}$。</p><p>对于两种不同的映射方式，有如下描述：<br>- 非交织的 CCE to REG 映射 ， $L = 6\quad and\quad f(j) = j$<br>- 交织的 CCE to REG 映射 ，对于 $N_{symb}^{CORESET} = 1$ , $L\in \lbrace 2,6 \rbrace$；对于$N_{symb}^{CORESET} \in \lbrace 2 ,3 \rbrace$ , $L\in \lbrace N_{symb}^{CORESET} ,6 \rbrace$；$l$由高层参数reg-BundleSize配置。<br>交织器定义如下：</p><script type="math/tex;mode=display">f(j) = (rC+c+n_{shift})mod(N_{REG}^{CORESET}/L)\\j = cR+r\\r = 0,1,...,R-1\\c = 0,1,...,C-1\\C = N_{REG}^{CORESET}/(LR)</script><p>其中 $R\in \{2,3,6 \}$由高层参数interleaverSize给出。对于$n_{shift}$:</p><ul><li>对于PBCH或SIB1配置的CORESET中发送的PDCCH，$n_{shift} = N_{ID}^{cell}$</li><li>除此之外，$n_{shift}\in\{ 0,1,…,274 \}$ 由高层参数shiftIndex给出。</li></ul><p>对于交织和非交织方式，利用直观的例子说明操作过程，例子参考文献中摘抄。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/例子1.png" alt></p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/例子2.png" alt></p><ul><li>如果高层参数precoderGranularity = sameAsREG-bundle，则在REG bundle内使用相同的预编码</li><li>如果高层参数precoderEranularity = allContiguousRBs，则在CORESET中的连续资源块集合中的所有资源单元组中使用相同的预编码</li></ul><p>对于由 PBCH配置的 CORESET，UE可以假设交织映射，$ L = 6 , R = 2$ ，以及在 REG bundle中使用的相同预编码。 [TS 38.211 7.3.2.1]</p><h3 id="2-5-3-Scrambling"><a href="#2-5-3-Scrambling" class="headerlink" title="2.5.3 Scrambling"></a>2.5.3 Scrambling</h3><p>UE应采用比特块 $b(0),…,b(M_{bit} -1)$ ($M_{bit}$ 是在物理信道上发送的比特数)，在调制之前被加扰，产生一个加扰比特块 $\widetilde b(0),…,\widetilde b(M_{bit})$ ，根据如下方式加扰：</p><script type="math/tex;mode=display">\widetilde b(i) = (b(i)+c(i))mod2</script><p>其中加扰序列 $c(i)$ 在[TS 38.211 5.2.1]给出，由$Gold$ 序列生成，此时初始化为 $c_{init} $由以下得出：</p><script type="math/tex;mode=display">c_{init} = (n_{RNTI}\cdot 2^{16} + n_{ID})mod2^{31}</script><p>对于$n_{ID}$：<br>- $n_{ID}\in \{0,2,…,65535\}$ = $pdcch-DMRS-ScramnlingID$ (如果已配置) ；<br>- 除此之外 $n_{ID} = N_{ID}^{cell}$。 [TS 38.213]</p><p>对于$n_{RNTI}$：<br>- 如果配置了高层参数 pdcch-DMRS-ScramnlingID，则由C-RNTI给出$UE$特定搜索空间；<br>- 除此之外$n_{RNTI} = 0$。</p><p>整体的流程如下图所展示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/NR_PDCCH_Scrambling_01.png" alt></p><h2 id="2-6-Modulation"><a href="#2-6-Modulation" class="headerlink" title="2.6 Modulation"></a>2.6 Modulation</h2><p>UE应采用比特块 $\widetilde b(0),…,\widetilde b(M_{bit})$按照如[TS 38.211 5.1.3]所述进行 QPSK调制，得到一个复值调制符号块 $d(0),…,d(M_{bit} -1)$。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/NR_PDCCH_Modulation_01.png" alt></p><h2 id="2-7-Resource-Element-Mapping"><a href="#2-7-Resource-Element-Mapping" class="headerlink" title="2.7 Resource Element Mapping"></a>2.7 Resource Element Mapping</h2><p>在用于被监视PDCCH的资源元素组中，UE将假定复数值符号块$\{d(0),…,d(M_{symb}-1))\}$将按比例因子$\beta_{PDCCH}$缩放并映射到资源单元$(k,l)_{p,\mu}$中，其顺序为先是时域，然后是频域，天线端口号$p = 2000$。</p><h2 id="2-8-PDCCH-DMRS"><a href="#2-8-PDCCH-DMRS" class="headerlink" title="2.8 PDCCH DMRS"></a>2.8 PDCCH DMRS</h2><h3 id="2-8-1-Sequence-generation"><a href="#2-8-1-Sequence-generation" class="headerlink" title="2.8.1 Sequence generation"></a>2.8.1 Sequence generation</h3><p>UE应采用如下方式定义参考信号序列$r_l(m)$：</p><script type="math/tex;mode=display">r_l(m) = \frac{1}{\sqrt{2} }(1-2*c(2m)) + j\frac{1}{\sqrt{2} }(1-2*c(2m+1))</script><p>加扰序列 $c(i)$ 在[TS 38.211 5.2.1]给出，由$Gold$ 序列生成，此时初始化为 $c_{init} $由以下得出：</p><script type="math/tex;mode=display">c_{init} = (2^{17}(14n_{s,f}^\mu+l+1)(2N_{ID}+1)+2N_{ID})mod2^{31}</script><p>其中：$l$ 是$slot$ 内OFDM符号编号，$n_{s,f}^\mu$ 是帧内的 $slot$ 号</p><p>对于$n_{ID}$：<br>- $n_{ID}\in \{0,2,…,65535\}$ = $pdcch-DMRS-ScramnlingID$ (如果已配置)；<br>- 除此之外 $n_{ID} = N_{ID}^{cell}$。 [TS 38.213]</p><h3 id="2-8-2-Resource-Element-Mapping"><a href="#2-8-2-Resource-Element-Mapping" class="headerlink" title="2.8.2 Resource Element Mapping"></a>2.8.2 Resource Element Mapping</h3><p>$UE$ 将$r_l(m)$ 映射到资源单元$(k,l)_{p,\mu}$ ，根据如下：</p><script type="math/tex;mode=display">\alpha_{k,l}^{p,\mu} = \beta_{DMRS}^{PDCCH}\cdot r_l(3n+k')\\ k = nN_{sc}^{RB}+4k'+1\\ k' = 0 ,1,2\\ n = 0,2,...</script><p>可以看出，每个RB上有3个DMRS RE，分别位于$4k’+1$ 的位置，即1、5、9号子载波。<br>$l$ 指在一个时隙内的OFDM符号；天线端口 $p$ 固定为2000。</p><p>对于precoderGranularity：<br>- 如果配置为 sameAsREG-bundle，那么该CORESET对应的DMRS仅在UE需要检测PDCCH的REG上；<br>- 如果配置为allContiguousRBs，则在组成CORESET的REG上都有DMRS映射。</p><p>对于参考点$k$：<br>- 如果CORCHET由PBCH或SIB1配置，则为CORESET中编号最小的资源块的子载波0，<br>- 否则，为公共资源块0中的子载波0</p><p>上述描述由下图可直观表示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-PDCCH%E5%AD%A6%E4%B9%A0/DMRS参考点.png" alt></p><blockquote><p>主要参考：<br>微信公众号：5G菜鸟成长日记<br>文章：Understanding the Heart of the 5G Air Interface: An Overview of Physical Downlink Control Channel for 5G New Radio (NR)<br>博客：<a href="https://blog.csdn.net/qq_33206497/article/details/89645976" target="_blank" rel="noopener">https://blog.csdn.net/qq_33206497/article/details/89645976</a><br>博客：<a href="https://blog.csdn.net/littleBird_2/article/details/88372875" target="_blank" rel="noopener">https://blog.csdn.net/littleBird_2/article/details/88372875</a><br>网页：<a href="http://www.sharetechnote.com/html/5G/5G_PDCCH.html#Ref_01" target="_blank" rel="noopener">http://www.sharetechnote.com/html/5G/5G_PDCCH.html#Ref_01</a></p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>5G协议</category>
      </categories>
      <tags>
        <tag>PDCCH</tag>
      </tags>
  </entry>
  <entry>
    <title>5G-NR-SSB学习</title>
    <url>/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<!-- build time:Sat Mar 21 2020 11:57:43 GMT+0800 (GMT+08:00) --><h1 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h1><p>SS/PBCU Block简称SSB，主要包含PSS、SSS以及PBCH。对于SSB的学习，主要采用如下步骤来学习，并加深理解的：</p><blockquote><ol><li>NR SSB 时域频域分析</li><li>PSS/SSS序列</li><li>PBCH payload 生成及处理</li><li>PBCH加扰/调制/RE映射</li><li>PBCH DMRS</li><li>UE SSB处理过程</li><li>同步过程理解</li></ol></blockquote><h1 id="二、学习进程"><a href="#二、学习进程" class="headerlink" title="二、学习进程"></a>二、学习进程</h1><h2 id="2-1-NR-SSB-时域频域分析"><a href="#2-1-NR-SSB-时域频域分析" class="headerlink" title="2.1 NR SSB 时域频域分析"></a>2.1 NR SSB 时域频域分析</h2><p>PSS和SSS主要用于UE获得时间同步和频率同步，获取小区ID；PBCH用于无线帧号同步以及SIB1的配置。与LTE的差异主要在于SSS序列都一样，不存在前后5 ms的差异且SSB的周期是可配置的，以及引入了beam index的概念。</p><h3 id="2-1-1-SSB时域分析"><a href="#2-1-1-SSB时域分析" class="headerlink" title="2.1.1 SSB时域分析"></a>2.1.1 SSB时域分析</h3><p>在5G中，每个SSB对应一个beam， SSB的最短时间跨度为5 ms，也就是半帧。一个半帧中可能存在多个SSB，我们将一个半帧中存在的一个或多个SSB称为SS Burst Set，一个SS Burst Set中的SSB包含的信息相同。两个SS Burst Set出现的时间，也就是存在SSB的半帧出现的时间是可以配置的，成为SS Burst Set Periodicity，5 ms–160 ms范围。默认为20 ms。<br>根据[TS 38.213]中的SSB的时间分布描述，总结成如下表所示。从表中可以看到，SSB符号的起始位置取决于Case类型以及所处频段，一个SSB在时域上占据4个符号。Num为SSB的总数。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/1.png" alt></p><p>以Case A，小于等于3 GHz为例，其符号位置如下图所示，SSB总数为4，各个SSB代表了不同的波束方向。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/2.png" alt></p><p>SSB的Case由Band决定，[TS 38.104]中规定</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/3.jpg" alt></p><h3 id="2-1-2-SSB频域分析"><a href="#2-1-2-SSB频域分析" class="headerlink" title="2.1.2 SSB频域分析"></a>2.1.2 SSB频域分析</h3><p>由上一节可知SSB时域是由4个symbol组成，而频域是由20个RB，也即240个子载波构成，它包含着set 0 ,PSS,SSS,PBCH,DMRS,结构如下表所示</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/4.png" alt></p><p>综合以上，下图更直观的显示SSB时域频域分布，横轴为频域，纵轴为时域。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/5.png" alt></p><p>与LTE中PSS和SSS固定在带宽的中间73个子载波不同，NR中SSB可能的频域位置有很多。NR中有一系列全局同步信道号GSCN，每个GSCN都会对应一个确定的、绝对的频率位置，系统会把SSB放在这些GSCN上，对齐方式为SSB的10号RB的0号子载波与GSCN对齐，UE就会在这些GSCN上挨个盲检SSB。</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/GSCN.png" alt></p><p>不同的operating band是分配给不同运营商的，所以UE是知道自己处在哪个operating band上的，比如n28分配给广电的，那么接入广电网络的UE在搜索SSB的时候，就盲检1901 – $&lt;$1$&gt;$ – 2002这个范围内的GSCN(参考2.1.1表格)，并且只搜索15kHz子载波间隔、case A下的SSB。</p><p>确定整个CRB中SSB所处于的位置，需要通过$K_{ssb}$和CORESET#0相应的offsetRB来确定。[TS 38.211]中$K_{ssb}$来表示公共资源快$N_{CRB}^{SSB}$子载波0相对SSB子载波0的偏移。$K_{SSB}$的低4bit由MIB参数中的ssb-SubcarrerOffset给出。<br>对于SSB类型B，即（μ= 3 or 4）来说,$K_{SSB}$={0,…,11}, 4 bit足够。<br>对于SSB类型A，即（μ= 0 or 1）来说, $K_{SSB}$={0,…,23}, 4 bit不够，需要5 bit来表示，因此使用PBCH payload中$a_{A+5}$来表示高比特位。下文会说明。<br>最终SSB在整个CRB中的位置如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/6.png" alt></p><h2 id="2-2-PSS-SSS序列"><a href="#2-2-PSS-SSS序列" class="headerlink" title="2.2 PSS/SSS序列"></a>2.2 PSS/SSS序列</h2><h3 id="2-2-1-PCI"><a href="#2-2-1-PCI" class="headerlink" title="2.2.1 PCI"></a>2.2.1 PCI</h3><p>PCI(Physical Cell Identifier)，物理小区标识，$N_{ID}^{cell}$定义如下：</p><script type="math/tex;mode=display">N_{ID}^{cell} = 3N_{ID}^{(1)} + N_{ID}^{(2)}\\N_{ID}^{cell}\in\lbrace 0,1,...,1007\rbrace\\N_{ID}^{(1)}\in\lbrace 0,1,...,355\rbrace\\N_{ID}^{(2)}\in \lbrace 0,1,2\rbrace</script><h3 id="2-2-2-PSS"><a href="#2-2-2-PSS" class="headerlink" title="2.2.2 PSS"></a>2.2.2 PSS</h3><p>PSS(Primary Synchronization Signal)，主同步信号，序列定义如下：</p><script type="math/tex;mode=display">d_{pss}(n) = 1 - 2x(m)\\m = (n + 43N_{ID}^{(2)})mod127\\0 ≤ n < 127</script><p>$x(m)$由如下序列得出：</p><script type="math/tex;mode=display">x(i+7) = (x(i+4)+x(i))mod2\\ [x(6)\quad x(5)\quad x(4)\quad x(3)\quad x(2)\quad x(1)\quad x(0)] = [1\quad 1\quad 1\quad 0\quad 1\quad 1\quad 0]</script><h3 id="2-2-3-SSS"><a href="#2-2-3-SSS" class="headerlink" title="2.2.3 SSS"></a>2.2.3 SSS</h3><p>SSS(Secondary Synchronization Signal)，辅同步信号，序列定义如下：</p><script type="math/tex;mode=display">d_{sss}(n) = [1 - 2x_0((n + m_0)mod127)][1 - 2x_1((n + m_1)mod127)]\\m_0 = 15[\frac{N_{ID}^{(1)}}{112}] + 5N_{ID}^{(2)}\\m_1 = N_{ID}^{(1)}mod112\\0\quad \leq n < 127</script><p>$x_1(m)$和$x_2(m)$由如下序列得出：</p><script type="math/tex;mode=display">x_0(i+7) = (x_0(i+4)+x_0(i))mod2\\ x_1(i+7) = (x_1(i+1)+x_1(i))mod2\\ [x_0(6)\quad x_0(5)\quad x_0(4)\quad x_0(3)\quad x_0(2)\quad x_0(1)\quad x_0(0)] = [0\quad 0\quad 0\quad 0\quad 0\quad 0\quad 1]\\ [x_1(6)\quad x_1(5)\quad x_1(4)\quad x_1(3)\quad x_1(2)\quad x_1(1)\quad x_1(0)] = [0\quad 0\quad 0\quad 0\quad 0\quad 0\quad 1]</script><h2 id="2-3-PBCH-payload-生成及处理"><a href="#2-3-PBCH-payload-生成及处理" class="headerlink" title="2.3 PBCH payload 生成及处理"></a>2.3 PBCH payload 生成及处理</h2><p>PBCH payload 组成如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/7.png" alt></p><h3 id="2-3-1-BCCH"><a href="#2-3-1-BCCH" class="headerlink" title="2.3.1 BCCH"></a>2.3.1 BCCH</h3><p>BCCH共24比特，其中B如果指示的是MIB信息，其中MIB信息只有23比特。看[TS 38.311 ]中的BCCH-BCH-Message结构，其中有1比特Choice指示，指示是mib还是messageClassExtension。<br>MIB的内容如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/8.png" alt></p><p><strong>systemFrameNumer</strong>- 无线帧号指示，这里只有6比特，还有4比特在PBCH payload中添加; <strong>6 bit</strong><br><strong>subCarrierSpacingCommon</strong> - 指示SIB1的子载波间隔，FR1为15KHz或60KHz，FR2为30KHz或120KHz; <strong>1 bit</strong><br><strong>ssb-SubcarrerOffset</strong><br>是距离SSB底部距离RB边界位置的偏移$K_{SSB}$, <strong>4 bit</strong><br>对于FR2来说, $K_{SSB}$={0,…,11}足够<br>对于FR1来说，$K_{SSB}$={0,…,23}不够，需要在PBCH payload中添加一位共同指示，即$a_(A+5)$<br><strong>dmrs-TypeA Position </strong>- PUSCH/PDSCH DMRS位置参数 <strong>1 bit</strong><br><strong>pdcch-ConfigSIB1</strong>- 共8比特，确定SIB1调度的时频位置 <strong>8 bit</strong><br><strong>cellBarred</strong> - 小区是否被准许接入指示 <strong>1 bit</strong><br><strong>intraFreqReselection</strong> - 是否允许同频重选指示 <strong>1 bit</strong></p><h3 id="2-3-2-PBCH-payload中其他内容"><a href="#2-3-2-PBCH-payload中其他内容" class="headerlink" title="2.3.2 PBCH payload中其他内容"></a>2.3.2 PBCH payload中其他内容</h3><p>PBCH payload还需要加上SFN的低4比特，half-frame半帧信息（由于5ms内映射完所有SSB，需要1比特指示是在前5 ms还是后5 ms，$n_{hf}$=0时，表示前半帧；当$n_{hf}$=1，表示第二个半帧），以及3比特 SSB index(SSB index的高3比特)或者$k_{ssb}$信息（取决于SSB总数，即 NR SSB时域频域分布中根据band指示确定的SSB总数Num，或者$L_{max}$），最终PBCH payload共<strong>32比特</strong>。</p><h3 id="2-3-3-PBCH-payload-操作"><a href="#2-3-3-PBCH-payload-操作" class="headerlink" title="2.3.3 PBCH payload 操作"></a>2.3.3 PBCH payload 操作</h3><p><strong>step 1</strong> - 确定载荷中内容（由前文已知）<br><strong>step 2</strong> - reorder<br>根据比特信息重新进行排序，G(j)即为排序后的顺序。操作后 (<strong>32 比特</strong>) ，如下图所示：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/9.png" alt></p><p><strong>step 3</strong> - scrambling<br>对于确定$v$值的无线帧号对应的$2^{nd}$/$3^{rd}$ LSB，半帧信息以及SSB index不进行加扰，加扰序列每80 ms进行初始化，$L_{max}$也即SSB总数。操作后(<strong>32 比特</strong>)，如下图所示：<br><br><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/10.png" alt></p><p><strong>step 4</strong> - CRC 添加循环冗余码后输出数据长度为32+24 = <strong>56 比特</strong><br><strong>step 5</strong> - Polar Coding 输出比特长度为N = $2^9$ = <strong>512比特</strong><br><strong>step 6</strong> - Rate Matching 输出数据长度为E = <strong>864 比特</strong>（E = 864即文章NR SSB时域频域分布中的PBCH所占RE个数432乘以2）</p><h2 id="2-4-PBCH加扰-调制-RE映射"><a href="#2-4-PBCH加扰-调制-RE映射" class="headerlink" title="2.4 PBCH加扰/调制/RE映射"></a>2.4 PBCH加扰/调制/RE映射</h2><h3 id="2-4-1-加扰"><a href="#2-4-1-加扰" class="headerlink" title="2.4.1 加扰"></a>2.4.1 加扰</h3><p>加扰部分相关参数取决于小区ID与SSB index。[TS 38.211 7.3.3.1] , 加扰由以下公式得出：</p><script type="math/tex;mode=display">\widetilde{b(i)} = (b(i)+c(i+vM_{bit}))mod2</script><p>加扰序列 $c(i)$ 在[TS 38.211 5.2.1]给出，由$Gold$ 序列生成，此时初始化为 $c_{init} = N_{ID}^{cell}$。<br>-对于 $L_{max} = 4$，$v$ is the 2 LSB of SSB index ;<br>-对于 $L_{max} = 8\quad or\quad 64 $，$v$ is the 3 LSB of SSB index ;</p><h3 id="2-4-2-调制"><a href="#2-4-2-调制" class="headerlink" title="2.4.2 调制"></a>2.4.2 调制</h3><p>PBCH使用QPSK调制方式。</p><h3 id="2-4-3-映射"><a href="#2-4-3-映射" class="headerlink" title="2.4.3 映射"></a>2.4.3 映射</h3><p>参照2.1节 NR SSB时域频域分布中的PBCH数据部分的RE映射，先时域后频域。</p><h2 id="2-5-PBCH-DMRS"><a href="#2-5-PBCH-DMRS" class="headerlink" title="2.5 PBCH DMRS"></a>2.5 PBCH DMRS</h2><h3 id="2-5-1-序列生成"><a href="#2-5-1-序列生成" class="headerlink" title="2.5.1 序列生成　"></a>2.5.1 序列生成</h3><p>UE应该采用参考信号序列$r(m)$对PBCH DMRS定义，相关参数取决于小区ID，SSB index还有半帧信息来觉得。由[TS 38.211 7.4.1.4.1]给出：</p><script type="math/tex;mode=display">r(m) = \frac{1}{ \sqrt{2} }(1-2*c(2m)) + j\frac{1}{ \sqrt{2} }(1-2*c(2m+1))</script><p>加扰序列 $c(i)$ 在[TS 38.211 5.2.1]给出，由$Gold$ 序列生成，此时初始化为 $c_{init} $由以下得出：</p><script type="math/tex;mode=display">c_{init} = 2^{11}( \overline{i}_{SSB}+1)([N_{ID}^{cell}/4]+1) + 2^6( \overline{i}_{SSB}+1)) + (N_{ID}^{cell}mod4)</script><p>-对于 $L_{max} = 4$，$\overline{i}_{SSB}$ 是SSB index 的2比特最低有效位和1比特半帧信息$n_{hf}$ (构成3比特，高位是半帧信息，也即$\overline{i}_{SSB} = {i}_{SSB} + 4n_{hf}$ );<br>-对于 $L_{max} = 8\quad or\quad 64 $，$\overline{i}_{SSB}$ 是SSB index 的3比特最低有效位(也即$\overline{i}_{SSB} = {i}_{SSB}$ )<br>-以上${i}_{SSB}$也即分别对应2.4.1中的$v$。</p><h3 id="2-5-2-映射"><a href="#2-5-2-映射" class="headerlink" title="2.5.2 映射"></a>2.5.2 映射</h3><p>参照2.1节 NR SSB时域频域分布中的PBCH DMRS数据部分的RE映射，$v = N_{ID}^{cell}mod4$(此时的v不同于上文)，先时域后频域。<strong>同频邻区设置不同的偏移有利于降低导频干扰</strong>。</p><h2 id="2-6-UE-SSB处理过程"><a href="#2-6-UE-SSB处理过程" class="headerlink" title="2.6 UE SSB处理过程"></a>2.6 UE SSB处理过程</h2><p>UE的处理过程即为上述过程的一个逆过程。</p><ol><li><p>通过PSS/SSS可以获得SSB的符号起始位置，小区ID；</p></li><li><p>通过小区ID，可以获得PBCH DMRS的频域位置，PBCH DMRS携带了3比特信息，具体代表的信息取决于$L_{max}$。PSS/SSS频点信息即确定了其所属Band，也就能够确定$L_{max}$的值，那么<br>1）$L_{max} = 4$，确定SSB index以及半帧指示；<br>2）$L_{max} = 8\quad or\quad 64$，确定SSB index低3比特；</p></li><li><p>PBCH RE解映射，解调制，2.4.1节处加扰对应的第一次解扰，此处解扰通过小区ID与由步骤2中确定SSB index的比特信息可以确定；</p></li><li><p>PBCH 解速率匹配，Polar译码，CRC校验，2.3.3节处加扰对应的第二次解扰，注意到无线帧号对应的2nd/3rd LSB未进行加扰，因此可以确定加扰序列，Cinit 80ms作为一次初始化，如下图所示：</p></li></ol><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/11.png" alt></p><ol><li>解交织，确定PBCH payload；</li></ol><h2 id="2-7-同步过程理解"><a href="#2-7-同步过程理解" class="headerlink" title="2.7 同步过程理解"></a>2.7 同步过程理解</h2><p>同步过程是移动终端获得无线网络的时间和频率的过程，是终端接入网络的前提。终端要知道网络在哪个时间，哪个频率上发送什么消息，才能正确接收网络下发的信息，而同步过程就是为了使终端知道这个时间和频率信息而进行的一系列操作。这些操作与2.6节<strong>UE SSB处理过程</strong>相互重叠。更形象的流程如下：</p><p><img src="/5G%E5%8D%8F%E8%AE%AE/5G-NR-SSB%E5%AD%A6%E4%B9%A0/概念.png" alt></p><p>第一步的时间与频率同步所指的是一般意义上，我们在通信系统课程中会学到的，接收端与发射端在时间域和频率域上的同步。它并不在5G协议的规定范围之内，一般都是由芯片厂家自己实现的。这一步常用的方法有互相关检测和自相关检测等，也就是通过将接收信号与已知信号(PSS)做互相关来检测已知信号的位置，或者通过对接收信号自身做自相关来检测循环前缀（CP）的位置。<br>这一步是为了获得OFDM的符号同步（时间同步）和检测同步信号所在频率（频率同步）。</p><p>一个可能的过程：<br>1、终端将射频接收机调谐到指定频点;<br>2、在时域对PSS做<strong>互相关检测</strong>以取得时域同步，同时获得$N_{ID}^{(2)}$; (在SSB的第一个symbol时间内，SSB频域范围内只有PSS信号，因此可以对它做相关检测; 相反，因为SSS所在的第三个symbol时间内还有PBCH，所以无法对它做时域相关检测）<br>3、根据PSS的位置可以获得SSS的位置，在频域对SSS做互相关检测，可以获得频域同步并同时获得$N_{ID}^{(1)}$;<br>4、由$N_{ID}^{(1)}$; 和$N_{ID}^{(2)}$; 可以获得PCI，由PCI又可以进一步解码PBCH DMRS, 从而获得SSB index和 half frame number $n_{hf}$;<br>5、最后利用对DMRS的信道估计，终端解码PBCH并获得系统消息MIB。</p><p>这里是一个matlab对上述过程的模拟程序：</p><blockquote><p><a href="https://www.mathworks.com/help/5g/examples/NR-Synchronization-Procedures.html" target="_blank" rel="noopener">https://www.mathworks.com/help/5g/examples/NR-Synchronization-Procedures.html</a></p></blockquote><p>由上一步可知，UE SSB处理过程与同步过程如出一辙，就是为了使终端知道这个时间和频率信息而进行的一系列操作。</p><blockquote><p>主要参考：<br>微信公众号：5G菜鸟成长日记，<br>博客：<a href="https://www.cnblogs.com/beilou310/p/11162798.html" target="_blank" rel="noopener">https://www.cnblogs.com/beilou310/p/11162798.html</a><br>博客：<a href="https://blog.csdn.net/qq_44113393/article/details/89844595" target="_blank" rel="noopener">https://blog.csdn.net/qq_44113393/article/details/89844595</a><br>博客：<a href="https://blog.csdn.net/m0_45416816/article/details/96605980" target="_blank" rel="noopener">https://blog.csdn.net/m0_45416816/article/details/96605980</a></p></blockquote><!-- rebuild by neat -->]]></content>
      <categories>
        <category>5G协议</category>
      </categories>
      <tags>
        <tag>PSS&amp;SSS</tag>
        <tag>PBCH</tag>
      </tags>
  </entry>
</search>
